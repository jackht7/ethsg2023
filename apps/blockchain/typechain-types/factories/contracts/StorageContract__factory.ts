/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StorageContract,
  StorageContractInterface,
} from "../../contracts/StorageContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "approveRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequests",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "txId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "enum StorageContract.ProjectStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "ipfsHash",
            type: "string",
          },
        ],
        internalType: "struct StorageContract.Request[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_juniorAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_seniorAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_clientAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factoryAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_ipfsHash",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rejectRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000600860006101000a81548160ff021916908360028111156200002d576200002c62000209565b5b02179055503480156200003f57600080fd5b5062000060620000546200007660201b60201c565b6200007e60201b60201c565b620000706200014360201b60201c565b6200031c565b600033905090565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff161562000196576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200018d90620002bf565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620002075760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001fe9190620002ff565b60405180910390a15b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b6000620002a760278362000238565b9150620002b48262000249565b604082019050919050565b60006020820190508181036000830152620002da8162000298565b9050919050565b600060ff82169050919050565b620002f981620002e1565b82525050565b6000602082019050620003166000830184620002ee565b92915050565b61143d806200032c6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100b4578063d67ee9c6146100d2578063e19695f7146100ee578063f2fde38b146100f85761007d565b8063263b81c914610082578063715018a61461008c5780638813ce1214610096575b600080fd5b61008a610114565b005b6100946101a9565b005b61009e6101bd565b6040516100ab9190610bbb565b60405180910390f35b6100bc610320565b6040516100c99190610c1e565b60405180910390f35b6100ec60048036038101906100e79190610d00565b610349565b005b6100f661067f565b005b610112600480360381019061010d9190610dc2565b610714565b005b600260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019e90610e4c565b60405180910390fd5b565b6101b1610797565b6101bb6000610815565b565b60606000600167ffffffffffffffff8111156101dc576101db610e6c565b5b60405190808252806020026020018201604052801561021557816020015b610202610905565b8152602001906001900390816101fa5790505b5090506040518060a001604052806002600001548152602001600115158152602001600860009054906101000a900460ff166002811115610259576102586109a8565b5b815260200160026001015481526020016002600501805461027990610eca565b80601f01602080910402602001604051908101604052809291908181526020018280546102a590610eca565b80156102f25780601f106102c7576101008083540402835291602001916102f2565b820191906000526020600020905b8154815290600101906020018083116102d557829003601f168201915b50505050508152508160008151811061030e5761030d610efb565b5b60200260200101819052508091505090565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900460ff1615905080801561037a5750600160008054906101000a900460ff1660ff16105b806103a75750610389306108da565b1580156103a65750600160008054906101000a900460ff1660ff16145b5b6103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd90610f9c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610423576001600060016101000a81548160ff0219169083151502179055505b6040518060c001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506002600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190816105d69190611168565b5090505083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106745760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161066b9190611282565b60405180910390a15b505050505050505050565b600260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610712576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610709906112e9565b60405180910390fd5b565b61071c610797565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361078b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107829061137b565b60405180910390fd5b61079481610815565b50565b61079f6108fd565b73ffffffffffffffffffffffffffffffffffffffff166107bd610320565b73ffffffffffffffffffffffffffffffffffffffff1614610813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080a906113e7565b60405180910390fd5b565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6040518060a001604052806000815260200160001515815260200160006002811115610934576109336109a8565b5b815260200160008152602001606081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61098781610974565b82525050565b60008115159050919050565b6109a28161098d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106109e8576109e76109a8565b5b50565b60008190506109f9826109d7565b919050565b6000610a09826109eb565b9050919050565b610a19816109fe565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a59578082015181840152602081019050610a3e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a8182610a1f565b610a8b8185610a2a565b9350610a9b818560208601610a3b565b610aa481610a65565b840191505092915050565b600060a083016000830151610ac7600086018261097e565b506020830151610ada6020860182610999565b506040830151610aed6040860182610a10565b506060830151610b00606086018261097e565b5060808301518482036080860152610b188282610a76565b9150508091505092915050565b6000610b318383610aaf565b905092915050565b6000602082019050919050565b6000610b5182610948565b610b5b8185610953565b935083602082028501610b6d85610964565b8060005b85811015610ba95784840389528151610b8a8582610b25565b9450610b9583610b39565b925060208a01995050600181019050610b71565b50829750879550505050505092915050565b60006020820190508181036000830152610bd58184610b46565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c0882610bdd565b9050919050565b610c1881610bfd565b82525050565b6000602082019050610c336000830184610c0f565b92915050565b600080fd5b600080fd5b610c4c81610974565b8114610c5757600080fd5b50565b600081359050610c6981610c43565b92915050565b610c7881610bfd565b8114610c8357600080fd5b50565b600081359050610c9581610c6f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610cc057610cbf610c9b565b5b8235905067ffffffffffffffff811115610cdd57610cdc610ca0565b5b602083019150836001820283011115610cf957610cf8610ca5565b5b9250929050565b60008060008060008060008060e0898b031215610d2057610d1f610c39565b5b6000610d2e8b828c01610c5a565b9850506020610d3f8b828c01610c5a565b9750506040610d508b828c01610c86565b9650506060610d618b828c01610c86565b9550506080610d728b828c01610c86565b94505060a0610d838b828c01610c86565b93505060c089013567ffffffffffffffff811115610da457610da3610c3e565b5b610db08b828c01610caa565b92509250509295985092959890939650565b600060208284031215610dd857610dd7610c39565b5b6000610de684828501610c86565b91505092915050565b600082825260208201905092915050565b7f4f6e6c7920636c69656e742063616e20617070726f7665207265717565737400600082015250565b6000610e36601f83610def565b9150610e4182610e00565b602082019050919050565b60006020820190508181036000830152610e6581610e29565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ee257607f821691505b602082108103610ef557610ef4610e9b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610f86602e83610def565b9150610f9182610f2a565b604082019050919050565b60006020820190508181036000830152610fb581610f79565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261101e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610fe1565b6110288683610fe1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061106561106061105b84610974565b611040565b610974565b9050919050565b6000819050919050565b61107f8361104a565b61109361108b8261106c565b848454610fee565b825550505050565b600090565b6110a861109b565b6110b3818484611076565b505050565b5b818110156110d7576110cc6000826110a0565b6001810190506110b9565b5050565b601f82111561111c576110ed81610fbc565b6110f684610fd1565b81016020851015611105578190505b61111961111185610fd1565b8301826110b8565b50505b505050565b600082821c905092915050565b600061113f60001984600802611121565b1980831691505092915050565b6000611158838361112e565b9150826002028217905092915050565b61117182610a1f565b67ffffffffffffffff81111561118a57611189610e6c565b5b6111948254610eca565b61119f8282856110db565b600060209050601f8311600181146111d257600084156111c0578287015190505b6111ca858261114c565b865550611232565b601f1984166111e086610fbc565b60005b82811015611208578489015182556001820191506020850194506020810190506111e3565b868310156112255784890151611221601f89168261112e565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b600060ff82169050919050565b600061126c6112676112628461123a565b611040565b611244565b9050919050565b61127c81611251565b82525050565b60006020820190506112976000830184611273565b92915050565b7f4f6e6c7920636c69656e742063616e2072656a65637420726571756573740000600082015250565b60006112d3601e83610def565b91506112de8261129d565b602082019050919050565b60006020820190508181036000830152611302816112c6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611365602683610def565b915061137082611309565b604082019050919050565b6000602082019050818103600083015261139481611358565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006113d1602083610def565b91506113dc8261139b565b602082019050919050565b60006020820190508181036000830152611400816113c4565b905091905056fea2646970667358221220d067466d2a98ad1c039dc0705e7fa75ced39433003b9c792cc96138ce7579a7c64736f6c63430008110033";

type StorageContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StorageContract__factory extends ContractFactory {
  constructor(...args: StorageContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StorageContract> {
    return super.deploy(overrides || {}) as Promise<StorageContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StorageContract {
    return super.attach(address) as StorageContract;
  }
  override connect(signer: Signer): StorageContract__factory {
    return super.connect(signer) as StorageContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageContractInterface {
    return new utils.Interface(_abi) as StorageContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StorageContract {
    return new Contract(address, _abi, signerOrProvider) as StorageContract;
  }
}
