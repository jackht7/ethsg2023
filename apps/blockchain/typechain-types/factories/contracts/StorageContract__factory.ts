/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StorageContract,
  StorageContractInterface,
} from "../../contracts/StorageContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_juniorAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_seniorAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_clientAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factoryAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_ipfsHash",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5062000032620000266200004860201b60201c565b6200005060201b60201c565b620000426200011560201b60201c565b620002bf565b600033905090565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff161562000168576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015f9062000262565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620001d95760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001d09190620002a2565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200024a602783620001db565b91506200025782620001ec565b604082019050919050565b600060208201905081810360008301526200027d816200023b565b9050919050565b600060ff82169050919050565b6200029c8162000284565b82525050565b6000602082019050620002b9600083018462000291565b92915050565b610d8380620002cf6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063d67ee9c614610079578063f2fde38b14610095575b600080fd5b6100596100b1565b005b6100636100c5565b6040516100709190610656565b60405180910390f35b610093600480360381019061008e9190610742565b6100ee565b005b6100af60048036038101906100aa9190610804565b610424565b005b6100b96104a7565b6100c36000610525565b565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900460ff1615905080801561011f5750600160008054906101000a900460ff1660ff16105b8061014c575061012e306105ea565b15801561014b5750600160008054906101000a900460ff1660ff16145b5b61018b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610182906108b4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156101c8576001600060016101000a81548160ff0219169083151502179055505b6040518060c001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506002600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600501908161037b9190610b1a565b5090505083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156104195760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516104109190610c34565b60405180910390a15b505050505050505050565b61042c6104a7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361049b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049290610cc1565b60405180910390fd5b6104a481610525565b50565b6104af61060d565b73ffffffffffffffffffffffffffffffffffffffff166104cd6100c5565b73ffffffffffffffffffffffffffffffffffffffff1614610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051a90610d2d565b60405180910390fd5b565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061064082610615565b9050919050565b61065081610635565b82525050565b600060208201905061066b6000830184610647565b92915050565b600080fd5b600080fd5b6000819050919050565b61068e8161067b565b811461069957600080fd5b50565b6000813590506106ab81610685565b92915050565b6106ba81610635565b81146106c557600080fd5b50565b6000813590506106d7816106b1565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610702576107016106dd565b5b8235905067ffffffffffffffff81111561071f5761071e6106e2565b5b60208301915083600182028301111561073b5761073a6106e7565b5b9250929050565b60008060008060008060008060e0898b03121561076257610761610671565b5b60006107708b828c0161069c565b98505060206107818b828c0161069c565b97505060406107928b828c016106c8565b96505060606107a38b828c016106c8565b95505060806107b48b828c016106c8565b94505060a06107c58b828c016106c8565b93505060c089013567ffffffffffffffff8111156107e6576107e5610676565b5b6107f28b828c016106ec565b92509250509295985092959890939650565b60006020828403121561081a57610819610671565b5b6000610828848285016106c8565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061089e602e83610831565b91506108a982610842565b604082019050919050565b600060208201905081810360008301526108cd81610891565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061095557607f821691505b6020821081036109685761096761090e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026109d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610993565b6109da8683610993565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610a17610a12610a0d8461067b565b6109f2565b61067b565b9050919050565b6000819050919050565b610a31836109fc565b610a45610a3d82610a1e565b8484546109a0565b825550505050565b600090565b610a5a610a4d565b610a65818484610a28565b505050565b5b81811015610a8957610a7e600082610a52565b600181019050610a6b565b5050565b601f821115610ace57610a9f8161096e565b610aa884610983565b81016020851015610ab7578190505b610acb610ac385610983565b830182610a6a565b50505b505050565b600082821c905092915050565b6000610af160001984600802610ad3565b1980831691505092915050565b6000610b0a8383610ae0565b9150826002028217905092915050565b610b23826108d4565b67ffffffffffffffff811115610b3c57610b3b6108df565b5b610b46825461093d565b610b51828285610a8d565b600060209050601f831160018114610b845760008415610b72578287015190505b610b7c8582610afe565b865550610be4565b601f198416610b928661096e565b60005b82811015610bba57848901518255600182019150602085019450602081019050610b95565b86831015610bd75784890151610bd3601f891682610ae0565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b600060ff82169050919050565b6000610c1e610c19610c1484610bec565b6109f2565b610bf6565b9050919050565b610c2e81610c03565b82525050565b6000602082019050610c496000830184610c25565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610cab602683610831565b9150610cb682610c4f565b604082019050919050565b60006020820190508181036000830152610cda81610c9e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d17602083610831565b9150610d2282610ce1565b602082019050919050565b60006020820190508181036000830152610d4681610d0a565b905091905056fea26469706673582212203982a0d37cb08f556aa974416b7d0a1a4c6ea1ad439073d658924aadfd26303564736f6c63430008110033";

type StorageContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StorageContract__factory extends ContractFactory {
  constructor(...args: StorageContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StorageContract> {
    return super.deploy(overrides || {}) as Promise<StorageContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StorageContract {
    return super.attach(address) as StorageContract;
  }
  override connect(signer: Signer): StorageContract__factory {
    return super.connect(signer) as StorageContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageContractInterface {
    return new utils.Interface(_abi) as StorageContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StorageContract {
    return new Contract(address, _abi, signerOrProvider) as StorageContract;
  }
}
